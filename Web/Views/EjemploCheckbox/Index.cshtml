<style>

    .agrupador-checkbox {
        height: 425px;
        border-right: 2px solid #ddd;
        background: #f1f1f1;
        overflow-y: scroll;
    }

</style>

<div class="page-content">

    <div class="navbar-overlay"></div>

    <div id="menuContent">

        <!-- Loading Overlay -->
        <div class="loading-backdrop" id="loadingOverlay">
            <div class="loading-circle">
                <div class="preloader-wrapper big active"><div class="spinner-layer spinner-white-only"><div class="circle-clipper left"><div class="circle"></div></div><div class="gap-patch"><div class="circle"></div></div><div class="circle-clipper right"><div class="circle"></div></div></div></div>
            </div>
        </div>
    </div>

    <main class="container">

        <section>

            <div class="card">

                <div class="card-header">
                    <div class="row">
                        <div class="col-12 d-flex align-items-end justify-content-between">
                            <h4 class="float-left heading h4-responsive mb-0">Probando</h4>
                        </div>
                    </div>
                </div>
                <div class="card-body">

                    <div class="row mb-4 mt2 info">
                        <div class="col-md-4 mb-4">
                            <div class=""><strong>Regiones</strong></div>
                            <div class="md-form">
                                <input placeholder="Buscar"
                                oninput="buscarRegion(this)" id="buscarRegion"
                                type="search" class="form-control mdb-autocomplete">
                            </div>

                            <div class="agrupador-checkbox mt-2">
                                <div id="probandoRegiones" class="mensajes">
                                </div>
                            </div>
                        </div>


                        <div id="area-academica-1" class="col-md-4 mb-4">
                            <div class=""><strong>Provincias</strong></div>
                            <div class="md-form">
                                <input placeholder="Buscar" 
                                oninput="buscarProvincia(this)" id="buscarProvincia"
                                type="search" class="form-control mdb-autocomplete">
                            </div>
                            <div class="agrupador-checkbox mt-2">
                                <div id="probandoProvincias" class="mensajes">
                                </div>
                            </div>
                        </div>

                        <div id="area-academica-2" class="col-md-4 mb-4" style="display: block;">
                            <div class=""><strong>Comunas</strong></div>
                            <div class="md-form">
                                <input placeholder="Buscar" 
                                oninput="buscarComuna(this)" id="buscarComuna"      
                                type="search" class="form-control mdb-autocomplete">
                            </div>
                            <div class="agrupador-checkbox mt-2">
                                <div id="probandoComunas" class="mensajes">
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
                <div class="card-footer">
                    <div class="row py-2 flex-row">

                        <div class="col col-md-6  d-flex justify-content-start">

                        </div>
                        <div class="col col-md-6 d-flex justify-content-end">

                            <button type="button" onclick="probando()" class="btn btn-primary">
                                <span>Probando traer datos</span>
                            </button>

                            <button type="button" onclick="imprimirElementosSeleccionados()" class="btn btn-secondary">
                                <span>Imprimir elementos seleccionados</span>
                            </button>

                        </div>
                    </div>
                </div>

            </div>


        </section>

    </main>

</div>

<script>

    let arregloRegiones = [];
    let arregloProvincias = [];
    let arregloComunas = [];

    (async () =>
    {
        showLoading();

        try {
            arregloRegiones = await obtenerDatos({
                url: `@Url.Action("ObtenerRegiones", "EjemploCheckbox")`,
                queryString: null
            });

            llenarElementoRegiones();
            evaluarMarcarTodoRegiones();
        }
        catch (ex) {
            console.log(ex);
        }
        finally { hideLoading() }
    })();

    //#region Regiones

    function buscarRegion(e)
    {
        let busqueda = e.value;
        if (busqueda == "") busqueda = null;
        llenarElementoRegiones(busqueda);
        evaluarMarcarTodoRegiones();
    }

    function llenarElementoRegiones(busqueda = null)
    {
        let querySelector = "#probandoRegiones";
        let arreglo = arregloRegiones;

        if (busqueda != null)
            arreglo = arreglo.filter(x => x.descripcion.toLowerCase().includes(busqueda.toLowerCase()));

        document.querySelector(querySelector).innerHTML = `
        <div id="${querySelector}" class="mensajes">

            ${(arreglo.length > 0 && busqueda == null) ?
                `<fieldset class="form-check texto">
                    <input class="form-check-input seleccionar-todo" type="checkbox" onchange="marcarTodoRegiones(event)"
                    id="checkbox-all-area-academica">

                    <label class="form-check-label" for="checkbox-all-area-academica">Seleccionar todos</label>
                </fieldset>`
            : ""}

            ${arreglo.map(x =>
            {
                return `<fieldset class="form-check texto">
                    <input class="form-check-input" type="checkbox" value="${x.codigo}"
                    onchange="seleccionarRegion('${x.codigo}')" id="checkbox-area-academica-${x.codigo}"
                    ${x.estaSeleccionado ? "checked" : ""}>

                    <label class="form-check-label" for="checkbox-area-academica-${x.codigo}">${x.descripcion}</label>
                </fieldset>`;
            })
            .join("")}
        </div>
        `;
    }

    async function seleccionarRegion(codigo)
    {
        arregloProvincias = [];
        arregloComunas = [];

        let elemento = arregloRegiones.find(x => x.codigo == codigo);
        elemento.estaSeleccionado = !elemento.estaSeleccionado;

        evaluarMarcarTodoRegiones();

        document.querySelector("#buscarProvincia").value = "";
        document.querySelector("#buscarComuna").value = "";
        limpiarElemento("#probandoProvincias");
        limpiarElemento("#probandoComunas");

        arregloProvincias = await obtenerProvinciasApi();  // NUEVO 11-1-2024
        desplegarProvincias();
        evaluarMarcarTodoProvincias();
    }

    function evaluarMarcarTodoRegiones()
    {
        let checkTodo = document.querySelector("#checkbox-all-area-academica");

        if (checkTodo != null) {
            let marcarTodo = arregloRegiones.every(x => x.estaSeleccionado);
            //let marcarTodo = Array.from(document.querySelectorAll(`#probandoRegiones input[type="checkbox"]:not(.seleccionar-todo)`)).every(x => x.checked);

            checkTodo.checked = marcarTodo;
        }
    }

    async function marcarTodoRegiones(evento)
    {
        arregloProvincias = [];
        arregloComunas = [];

        let estaMarcado = evento.target.checked;

        // Marca todos los elementos del arreglo en su atributo estaSeleccionado con el valor correspondiente
        arregloRegiones = arregloRegiones.map(x => ({ ...x, estaSeleccionado: estaMarcado }));

        let checkboxes = document.querySelectorAll(`#probandoRegiones input[type="checkbox"]`);
        checkboxes.forEach(checkbox => checkbox.checked = estaMarcado);

        document.querySelector("#buscarProvincia").value = "";
        limpiarElemento("#probandoProvincias");
        limpiarElemento("#probandoComunas");

        arregloProvincias = await obtenerProvinciasApi();  // NUEVO 11-1-2024
        desplegarProvincias();
        evaluarMarcarTodoProvincias();
    }

    //#endregion Regiones

    //#region Provincias

    function buscarProvincia(e)
    {
        let busqueda = e.value;
        if (busqueda == "") busqueda = null;
        desplegarProvincias(busqueda);
        evaluarMarcarTodoProvincias();
    }

    function desplegarProvincias(busqueda = null)
    {
        let querySelector = "#probandoProvincias";
        let arreglo = arregloProvincias;

        if (busqueda != null)
            arreglo = arreglo.filter(x => x.descripcion.toLowerCase().includes(busqueda.toLowerCase()));

        document.querySelector(querySelector).innerHTML = `
        <div id="${querySelector}" class="mensajes">

            ${(arreglo.length > 0 && busqueda == null) ?
                `<fieldset class="form-check texto">
                    <input class="form-check-input seleccionar-todo" type="checkbox" onchange="marcarTodoProvincias(event)"
                    id="checkbox-all-programa-estudio">

                    <label class="form-check-label" for="checkbox-all-programa-estudio">Seleccionar todos</label>
                </fieldset>`
            : ""}

            ${arreglo.map(x =>
            {
                return `<fieldset class="form-check texto">
                    <input class="form-check-input" type="checkbox" value="${x.codigo}"
                    onchange="seleccionarProvincia('${x.codigo}')" id="checkbox-programa-estudio-${x.codigo}"
                    ${x.estaSeleccionado ? "checked" : ""}>

                    <label class="form-check-label" for="checkbox-programa-estudio-${x.codigo}">${x.descripcion}</label>
                </fieldset>`;
            })
            .join("")}
        </div>
        `;
    }

    async function seleccionarProvincia(codigo)
    {
        arregloComunas = [];
        let elemento = arregloProvincias.find(x => x.codigo == codigo);
        elemento.estaSeleccionado = !elemento.estaSeleccionado;

        evaluarMarcarTodoProvincias();

        limpiarDespliegueComunas();
        arregloComunas = await obtenerComunasApi();  // NUEVO 11-1-2024
        desplegarComunas();
        evaluarMarcarTodoComunas();
    }

    function evaluarMarcarTodoProvincias()
    {
        let checkTodo = document.querySelector("#checkbox-all-programa-estudio");

        if (checkTodo != null) {
            let marcarTodo = arregloProvincias.every(x => x.estaSeleccionado);
            //let marcarTodo = Array.from(document.querySelectorAll(`#probandoProvincias input[type="checkbox"]:not(.seleccionar-todo)`)).every(x => x.checked);

            checkTodo.checked = marcarTodo;
        }
    }

    async function marcarTodoProvincias(evento)
    {
        arregloComunas = [];
        let estaMarcado = evento.target.checked;

        // Marca todos los elementos del arreglo en su atributo estaSeleccionado con el valor correspondiente
        arregloProvincias = arregloProvincias.map(x => ({ ...x, estaSeleccionado: estaMarcado }));

        let checkboxes = document.querySelectorAll(`#probandoProvincias input[type="checkbox"]`);
        checkboxes.forEach(checkbox => checkbox.checked = estaMarcado);

        limpiarDespliegueComunas();
        arregloComunas = await obtenerComunasApi();  // NUEVO 11-1-2024
        desplegarComunas();
        evaluarMarcarTodoComunas();
    }

    function obtenerProvinciasApi()  // NUEVO 11-1-2024
    {
        return new Promise(async (resolve, reject) =>
        {
            if (arregloRegiones.some(x => x.estaSeleccionado))
            {
                //let valores = obtenerValores("#probandoRegiones");
                let valores = arregloRegiones.filter(x => x.estaSeleccionado).map(x => x.codigo).join(",");

                if (valores != null)
                {
                    showLoading();

                    try {

                        let res = await obtenerDatos({
                            url: `@Url.Action("ObtenerProvincias", "EjemploCheckbox")`,
                            queryString: `i_regiones=${valores}`
                        });

                        resolve(res);
                    }
                    catch (ex) {
                        reject(ex);
                    }
                    finally { hideLoading() }
                }
            }
        });
    }

    //#endregion Provincias

    //#region Comunas

    function buscarComuna(e)
    {
        let busqueda = e.value;
        if (busqueda == "") busqueda = null;
        desplegarComunas(busqueda);
        evaluarMarcarTodoComunas();
    }

    function desplegarComunas(busqueda = null)
    {
        let querySelector = "#probandoComunas";
        let arreglo = arregloComunas;

        if (busqueda != null)
            arreglo = arreglo.filter(x => x.descripcion.toLowerCase().includes(busqueda.toLowerCase()));

        document.querySelector(querySelector).innerHTML = `
        <div id="${querySelector}" class="mensajes">

            ${(arreglo.length > 0 && busqueda == null) ?
                `<fieldset class="form-check texto">
                    <input class="form-check-input seleccionar-todo" type="checkbox" onchange="marcarTodoComunas(event)"
                    id="checkbox-all-asignatura">

                    <label class="form-check-label" for="checkbox-all-asignatura">Seleccionar todos</label>
                </fieldset>`
                : ""}

            ${arreglo.map(x =>
            {
                return `<fieldset class="form-check texto">
                    <input class="form-check-input" type="checkbox" value="${x.codigo}"
                    onchange="seleccionarComuna('${x.codigo}')" id="checkbox-asignatura-${x.codigo}"
                    ${x.estaSeleccionado ? "checked" : ""}>

                    <label class="form-check-label" for="checkbox-asignatura-${x.codigo}">${x.descripcion}</label>
                </fieldset>`;
            })
            .join("")}
        </div>
        `;
    }

    function seleccionarComuna(codigo)
    {
        let elemento = arregloComunas.find(x => x.codigo == codigo);
        elemento.estaSeleccionado = !elemento.estaSeleccionado;
        evaluarMarcarTodoComunas();
    }

    function marcarTodoComunas(evento)
    {
        let estaMarcado = evento.target.checked;

        // Marca todos los elementos del arreglo en su atributo estaSeleccionado con el valor correspondiente
        arregloComunas = arregloComunas.map(x => ({ ...x, estaSeleccionado: estaMarcado }));

        let checkboxes = document.querySelectorAll(`#probandoComunas input[type="checkbox"]`);
        checkboxes.forEach(checkbox => checkbox.checked = estaMarcado);
    }

    function evaluarMarcarTodoComunas()
    {
        let checkTodo = document.querySelector("#checkbox-all-asignatura");

        if (checkTodo != null) {
            let marcarTodo = arregloComunas.every(x => x.estaSeleccionado);
            //let marcarTodo = Array.from(document.querySelectorAll(`#probandoComunas input[type="checkbox"]:not(.seleccionar-todo)`)).every(x => x.checked);

            checkTodo.checked = marcarTodo;
        }
    }

    function obtenerComunasApi()  // NUEVO 11-1-2024
    {
        return new Promise(async (resolve, reject) =>
        {
            if (arregloProvincias.some(x => x.estaSeleccionado))
            {
                //let valores = obtenerValores("#probandoProvincias");
                let valores = arregloProvincias.filter(x => x.estaSeleccionado).map(x => x.codigo).join(",");

                if (valores != null)
                {
                    showLoading();

                    try
                    {
                        let res = await obtenerDatos({
                            url: `@Url.Action("ObtenerComunas", "EjemploCheckbox")`,
                            queryString: `i_provincias=${valores}`
                        });

                        resolve(res);
                    }
                    catch (ex) {
                        reject(ex);
                    }
                    finally { hideLoading() }
                }
            }

        });
    }

    function limpiarDespliegueComunas()
    {
        document.querySelector("#buscarComuna").value = "";
        limpiarElemento("#probandoComunas");
    }

    //#endregion Comunas

    //==========================================>>>>

    //function obtenerValores(querySelector)
    //{
    //    let checkboxSeleccionados = Array.from(document.querySelectorAll(`${querySelector} input[type="checkbox"]:not(.seleccionar-todo)`))
    //        .filter(x => x.checked);

    //    if (checkboxSeleccionados.length > 0)
    //        return checkboxSeleccionados.map(x => x.value).join(",");

    //    return null;
    //}

    async function probando()
    {
        showLoading();

        try {
            let res = await obtenerDatos({
                url: `@Url.Action("Probando", "EjemploCheckbox")`,
                queryString: null
            });

            // Desplegar Regiones
            arregloRegiones = res.regiones;
            llenarElementoRegiones();
            evaluarMarcarTodoRegiones();

            // Desplegar Provincias
            arregloProvincias = res.provincias;
            desplegarProvincias();
            evaluarMarcarTodoProvincias();

            // Desplegar Comunas
            arregloComunas = res.comunas;
            desplegarComunas();
            evaluarMarcarTodoComunas();
        }
        catch (ex) {
            console.log(ex);
        }
        finally { hideLoading() }
    }

    function imprimirElementosSeleccionados()
    {
        let cadena = `Regiones: ${arregloRegiones.filter(x => x.estaSeleccionado).map(x => x.codigo).join(", ")} \n\n`;
        cadena += `Provincias: ${arregloProvincias.filter(x => x.estaSeleccionado).map(x => x.codigo).join(", ")} \n\n`;
        cadena += `Comunas: ${arregloComunas.filter(x => x.estaSeleccionado).map(x => x.codigo).join(", ")}`;

        alert(cadena);
    }

    function obtenerDatos(datos)
    {
        return new Promise((resolve, reject) =>
        {
            fetch(datos.url, {
                method: "POST",
                headers: { "Content-Type": "application/x-www-form-urlencoded" },
                body: datos.queryString,
            })
            .then(response =>
            {
                if (response.ok)
                {
                    response.json().then(res =>
                    {
                        if (res.status == 200)
                            resolve(res.objeto);
                        else
                            reject(res);
                    });
                }
            })
            .catch(error => {
                reject("Ocurrió un error al obtener la información");
            });
        });
    }

    function showLoading() {
        $('#loadingOverlay').show();
    }

    function hideLoading() {
        $('#loadingOverlay').hide();
    }

    function limpiarElemento(querySelector) {
        document.querySelector(querySelector).innerHTML = "";
    }

</script>